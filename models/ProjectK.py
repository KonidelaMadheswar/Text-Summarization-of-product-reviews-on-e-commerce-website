# -*- coding: utf-8 -*-
"""ProjectKK.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KaIafPM_21UJi1WLGAaVojCm_yjPh5oh
"""

import pandas as pd
from transformers import BartTokenizer, BartForConditionalGeneration
from transformers import pipeline
import spacy
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor
from tqdm import tqdm

class Amazon:

    @staticmethod
    def process_amazon(product_name):
        # Load the 'en_core_web_sm' model
        nlp = spacy.load('en_core_web_sm')

        # Load the spaCy English language model
        tokenizer = BartTokenizer.from_pretrained('facebook/bart-large-cnn')
        summarization_model = BartForConditionalGeneration.from_pretrained('facebook/bart-large-cnn')
        sentiment_analysis_pipeline = pipeline('sentiment-analysis')
        
        data = pd.read_csv('./models/amazon_reviews.csv')
        
        product_reviews = data[data['ProductName'] == product_name]['Review'].astype(str)
        product_url = data[data['ProductName'] == product_name]['Url'].iloc[0]


        # Assuming product_reviews is a list of review texts
        preprocessed_reviews = [Amazon.preprocess_text(review, nlp) for review in product_reviews]

        # Process reviews in parallel
        with ThreadPoolExecutor(max_workers=16) as executor:
            results = list(executor.map(Amazon.process_review, preprocessed_reviews, [tokenizer]*len(preprocessed_reviews), [summarization_model]*len(preprocessed_reviews), [sentiment_analysis_pipeline]*len(preprocessed_reviews)))

        summary_review, sentiment_scores = zip(*results)

        df = {'summary': summary_review, 'sentimental score': sentiment_scores}
        df1 = pd.DataFrame(df)

        average_positive_score = sum(1 for score in sentiment_scores if score == 'POSITIVE') / len(sentiment_scores)
        average_negative_score = sum(1 for score in sentiment_scores if score == 'NEGATIVE') / len(sentiment_scores)

        if average_positive_score > average_negative_score:
            return "Overall sentiment is positive.", average_positive_score, average_negative_score, product_url
        elif average_positive_score < average_negative_score:
            return "Overall sentiment is negative.", average_positive_score, average_negative_score, product_url
        else:
            return "Overall sentiment is neutral.", product_url

    @staticmethod
    def preprocess_text(text, nlp):
        # Tokenize the text
        doc = nlp(text)

        # Remove stop words and lemmatize the tokens
        preprocessed_tokens = [token.lemma_ for token in doc if not token.is_stop]

        # Join the lemmatized tokens into a clean text
        preprocessed_text = " ".join(preprocessed_tokens)

        return preprocessed_text

    @staticmethod
    def process_review(review, tokenizer, summarization_model, sentiment_analysis_pipeline):
        # Summarize the review using BART
        inputs = tokenizer.encode("summarize: " + review, return_tensors="pt")
        summary_ids = summarization_model.generate(inputs, max_length=30, min_length=20, length_penalty=2.0, num_beams=4, early_stopping=True)
        summarized_review = tokenizer.decode(summary_ids[0], skip_special_tokens=True)

        # Sentiment analysis of the summarized review
        sentiment_score = sentiment_analysis_pipeline(summarized_review)[0]['label']

        return summarized_review, sentiment_score
